########## accounts\admin.py ##########
from django.contrib import admin
from .models import CustomUser

admin.site.register(CustomUser)


########## accounts\apps.py ##########
from django.apps import AppConfig


class AccountsConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "accounts"


########## accounts\forms.py ##########
from django import forms
from django.contrib.auth.forms import UserCreationForm

from accounts.models import CustomUser


class UserUpdateForm(forms.ModelForm):
    class Meta:
        model = CustomUser
        fields = ['name', 'email']


class CustomUserCreationForm(UserCreationForm):
    class Meta:
        model = CustomUser
        fields = ('username', 'name', 'email', 'password1', 'password2')


########## accounts\models.py ##########
from django.contrib.auth.models import AbstractUser
from django.db import models


class CustomUser(AbstractUser):
    name = models.CharField(max_length=255, blank=True, null=True)
    move_in_date = models.DateField(blank=True, null=True)
    move_out_date = models.DateField(blank=True, null=True)
    google_profile_picture = models.URLField(blank=True, null=True)

    def __str__(self):
        return self.username


########## accounts\pipeline.py ##########
from .models import CustomUser


def save_profile_picture(strategy, details, user=None, *args, **kwargs):
    url = details.get("image", {}).get("url", None)
    if url and user:
        user.google_profile_picture = url
        user.save()


########## accounts\tests.py ##########
from django.contrib.auth import get_user_model
from django.test import RequestFactory, TestCase
from django.urls import reverse

CustomUser = get_user_model()


class UserRegistrationTests(TestCase):

    def test_user_registration(self):
        self.client.post(reverse('signup'), {
            'username': 'testuser',
            'name': 'Test User',
            'email': 'testuser@example.com',
            'password1': 'testpassword',
            'password2': 'testpassword'
        })
        self.assertEqual(CustomUser.objects.count(), 1)
        user = CustomUser.objects.first()
        self.assertEqual(user.username, 'testuser')
        self.assertEqual(user.name, 'Test User')
        self.assertEqual(user.email, 'testuser@example.com')


class LoginViewTests(TestCase):

    def setUp(self):
        self.user = CustomUser.objects.create_user(
            username='testuser',
            password='testpassword',
            email='testuser@example.com',
            name='Test User'
        )
        self.user.backend = 'django.contrib.auth.backends.ModelBackend'

    def test_correct_login(self):
        response = self.client.post(reverse('login'), {
            'username': 'testuser',
            'password': 'testpassword'
        })
        self.assertTrue(response.wsgi_request.user.is_authenticated)

    def test_incorrect_login(self):
        response = self.client.post(reverse('login'), {
            'username': 'testuser',
            'password': 'wrongpassword'
        })

        self.assertFalse(response.wsgi_request.user.is_authenticated)

class ProfileViewTest(TestCase):
    def setUp(self):
        self.factory = RequestFactory()
        self.user = CustomUser.objects.create_user(
            username='testuser',
            password='testpassword',
            email='testuser@example.com',
            name='Test User'
        )
        self.user.backend = 'django.contrib.auth.backends.ModelBackend'

    def test_profile_view(self):
        # Log in the user with the specified backend
        self.client.login(username='testuser', password='testpassword',
                          backend='django.contrib.auth.backends.ModelBackend')
        response = self.client.get(reverse('profile'))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Test User')
        self.assertContains(response, 'testuser@example.com')

    def test_profile_update(self):
        self.client.post(reverse('profile'), {
            'name': 'Updated Name',
            'email': 'updated@example.com'
        })
        updated_user = CustomUser.objects.get(pk=self.user.pk)
        self.assertEqual(updated_user.name, 'Updated Name')
        self.assertEqual(updated_user.email, 'updated@example.com')


########## accounts\urls.py ##########
from django.urls import path, include

from .views import CustomLoginView, signup, CustomLogoutView, profile

urlpatterns = [
    path('login/', CustomLoginView.as_view(), name='login'),
    path('signup/', signup, name='signup'),
    path('logout/', CustomLogoutView.as_view(), name='logout'),
    path('profile/', profile, name='profile'),
    path('', include('django.contrib.auth.urls')),
    path('', include('social_django.urls', namespace='social')),
]


########## accounts\views.py ##########
from django.contrib.auth import login
from django.contrib.auth.decorators import login_required
from django.contrib.auth.views import LoginView, LogoutView
from django.shortcuts import render, redirect

from accounts.forms import CustomUserCreationForm, UserUpdateForm  # Update the import


class CustomLoginView(LoginView):
    template_name = 'login.html'


def signup(request):
    if request.method == 'POST':
        form = CustomUserCreationForm(request.POST)  # Update this line to use the custom form
        if form.is_valid():
            user = form.save()
            login(request, user)
            return redirect('home')
    else:
        form = CustomUserCreationForm()  # Update this line to use the custom form
    return render(request, 'signup.html', {'form': form})


class CustomLogoutView(LogoutView):
    next_page = 'home'


@login_required
def profile(request):
    user = request.user

    if request.method == 'POST':
        form = UserUpdateForm(request.POST, instance=user)
        if form.is_valid():
            form.save()
            return redirect('profile')
    else:
        form = UserUpdateForm(instance=user)

    context = {
        'user': user,
        'form': form
    }
    return render(request, 'profile.html', context)


########## accounts\__init__.py ##########


########## accounts\migrations\0001_initial.py ##########
# Generated by Django 4.1.7 on 2023-03-19 16:17

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                ("move_in_date", models.DateField(blank=True, null=True)),
                ("move_out_date", models.DateField(blank=True, null=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]


########## accounts\migrations\0002_customuser_google_profile_picture.py ##########
# Generated by Django 4.1.7 on 2023-03-20 10:21

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("accounts", "0001_initial"),
    ]

    operations = [
        migrations.AddField(
            model_name="customuser",
            name="google_profile_picture",
            field=models.URLField(blank=True, null=True),
        ),
    ]


########## accounts\migrations\__init__.py ##########


