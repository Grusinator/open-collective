########## dinner_club/events\admin.py ##########
from django.contrib import admin

# Register your models here.


########## dinner_club/events\apps.py ##########
from django.apps import AppConfig


class EventsConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "events"


########## dinner_club/events\calendar_utils.py ##########
import calendar
from datetime import date


def month_calendar(year, month):
    cal = calendar.Calendar()
    weeks = cal.monthdatescalendar(year, month)
    return weeks


########## dinner_club/events\forms.py ##########
from django import forms

from .models import DinnerClubEvent


class DinnerClubEventForm(forms.ModelForm):
    class Meta:
        model = DinnerClubEvent
        fields = ['date']
        widgets = {
            'date': forms.DateTimeInput(attrs={'type': 'datetime-local', 'step': '60'}),
        }




########## dinner_club/events\models.py ##########
from django.contrib.auth.models import User
from django.db import models


class DinnerClubEvent(models.Model):
    name = models.CharField(max_length=255)
    host = models.ForeignKey(User, on_delete=models.CASCADE)
    date = models.DateTimeField()
    attendees = models.ManyToManyField(User, related_name='attendees', blank=True)

    def __str__(self):
        return self.name

########## dinner_club/events\tests.py ##########
from django.test import TestCase

# Create your tests here.


########## dinner_club/events\urls.py ##########
from django.urls import path, include
from .views import home, create_event, calendar_view

urlpatterns = [
    path('', home, name='home'),
    path('create/', create_event, name='create_event'),
    path('calendar/', calendar_view, name='calendar'),
]


########## dinner_club/events\views.py ##########
from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from datetime import date

from .calendar_utils import month_calendar
from .models import DinnerClubEvent
from .forms import DinnerClubEventForm


def home(request):
    return render(request, 'events/home.html')


@login_required
def create_event(request):
    if request.method == 'POST':
        form = DinnerClubEventForm(request.POST)
        if form.is_valid():
            event = form.save(commit=False)
            event.host = request.user
            event.save()
            return redirect('home')
    else:
        form = DinnerClubEventForm()
    return render(request, 'events/create_event.html', {'form': form})


@login_required
def calendar_view(request):
    today = date.today()
    events = DinnerClubEvent.objects.filter(date__year=today.year, date__month=today.month)
    weeks = month_calendar(today.year, today.month)
    return render(request, 'events/calendar.html', {'weeks': weeks, 'events': events})


########## dinner_club/events\__init__.py ##########


########## dinner_club/events\migrations\0001_initial.py ##########
# Generated by Django 4.1.7 on 2023-03-17 08:06

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="DinnerClubEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("date", models.DateTimeField()),
                (
                    "attendees",
                    models.ManyToManyField(
                        blank=True,
                        related_name="attendees",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "host",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]


########## dinner_club/events\migrations\__init__.py ##########


########## dinner_club/events\templatetags\events_extras.py ##########
from django import template

register = template.Library()

@register.filter
def to_date(value):
    return value.date()

########## dinner_club/events\templatetags\__init__.py ##########


